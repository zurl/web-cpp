/* tslint:disable */
export const Headers = new Map<string, string>([["assert.h","#ifndef _ASSERT_H\n#define _ASSERT_H\n\n#ifdef NDEBUG\n#define assert(EX)\n#else\n#define assert(EX) (void)((EX) || (__assert (#EX, __FILE__, __LINE__),0))\n#endif\n\nvoid __assert (const char *msg, const char *file, int line);\n\n#endif"],["ctype.h","#ifndef _CTYPE_H\n#define _CTYPE_H\n\n__libcall int isalnum(int);\n__libcall int isalpha(int);\n__libcall int isblank(int);\n__libcall int iscntrl(int);\n__libcall int isdigit(int);\n__libcall int isgraph(int);\n__libcall int islower(int);\n__libcall int isprint(int);\n__libcall int ispunct(int);\n__libcall int isspace(int);\n__libcall int isupper(int);\n__libcall int isxdigit(int);\n__libcall int tolower(int);\n__libcall int toupper(int);\n\n#undef"],["limit.h","#ifndef _LIMIT_H\n#define _LIMIT_H\n\n#define CHAR_BIT 8\n#define SCHAR_MIN -128\n#define SCHAR_MAX 127\n#define UCHAR_MAX 255\n#define CHAR_MIN 0\n#define CHAR_MAX 255\n#define MB_LEN_MAX 1\n#define SHRT_MIN  -32768\n#define SHRT_MAX  32767\n#define USHRT_MAX 65535\n#define INT_MIN  -2147483648\n#define INT_MAX  2147483647\n#define UINT_MAX 4294967296U\n#define LONG_MIN -2147483648\n#define LONG_MAX 2147483647\n#define ULONG_MAX 4294967296U\n#define LLONG_MIN -9223372036854775807LL\n#define LLONG_MAX 9223372036854775808LL\n#define ULLONG_MAX 18446744073709551616\n\n#endif"],["math.h","#ifndef _MATH_H\n#define _MATH_H\n\n__libcall double cos(double);\n__libcall double sin(double);\n__libcall double tan(double);\n__libcall double acos(double);\n__libcall double asin(double);\n__libcall double atan(double);\n__libcall double atan2(double, double);\n\n__libcall double cosh(double);\n__libcall double sinh(double);\n__libcall double tanh(double);\n__libcall double acosh(double);\n__libcall double asinh(double);\n__libcall double atanh(double);\n\n__libcall double cbrt(double);\n__libcall double ceil(double);\n__libcall double exp(double);\n__libcall double expm1(double);\n__libcall double fabs(double);\n__libcall double floor(double);\n__libcall double fmax(double, double);\n__libcall double fmin(double, double);\n//__libcall double fmod(double, double);\n__libcall double hypot(double, double);\n__libcall double log(double);\n__libcall double log10(double);\n__libcall double log1p(double);\n__libcall double log2(double);\n__libcall double logb(double);\n__libcall double pow(double, double);\n__libcall double round(double);\n__libcall double sinh(double);\n__libcall double sqrt(double);\n__libcall double trunc(double);\n\n#endif"],["stdarg.h","#ifndef _STDARG_H\n#define _STDARG_H\n\ntypedef void* va_list;\n#define va_start(ptr,arg) (ptr) = &(arg) + sizeof(arg) + 4\n#define va_arg(ptr,type) ((ptr) += sizeof(type), *((type *)(ptr - sizeof(type))))\n#define va_end(ptr) (ptr) = 0;\n\n#endif"],["stdio.h","#ifndef _STDIO_H\n#define _STDIO_H\n\n__libcall void dump_stack_info();\n\n\n__libcall int scanf(const char * format, ...);\n__libcall int printf(const char * format, ...);\n__libcall int getchar();\nint puts(const char * str);\n\n#endif"],["stdlib.h","#ifndef _STDLIB_H\n#define _STDLIB_H\n\n__libcall void *malloc(unsigned int num_bytes);\n__libcall void *memset(void * ptr, int ch, unsigned int num_bytes);\n__libcall void free(void * ptr);\n__libcall void srand( unsigned seed ):\n__libcall int rand():\n\n#endif"],["string.h","#ifndef _STRING_H\n#define _STRING_H\n\ntypedef unsigned int size_t;\n__libcall int    memcmp(const void *, const void *, size_t);\n__libcall void*  memcpy(void *, const void *, size_t);\n__libcall void*  memset(void *, int, size_t);\n__libcall void*  memmove(void *, const void *, size_t);\n\n__libcall char*  strcpy(char *, const char *);\n__libcall int    strcmp(const char *, const char *);\n__libcall char*  strcat(char *, const char *);\n__libcall size_t strlen(const char *);\n__libcall char*  strchr(const char *, int);\n__libcall char*  strncat(char *, const char *, size_t);\n__libcall int    strncmp(const char *, const char *, size_t);\n__libcall char*  strncpy(char *, const char *, size_t);\n\n/*\n__libcall void*  memccpy(void *, const void *, int, size_t);\n__libcall void*  memchr(const void *, int, size_t);\n__libcall int    strcoll(const char *, const char *);\n__libcall size_t strcspn(const char *, const char *);\n__libcall char*  strdup(const char *);\n__libcall char*  strerror(int);\n__libcall char*  strpbrk(const char *, const char *);\n__libcall char*  strrchr(const char *, int);\n__libcall size_t strspn(const char *, const char *);\n__libcall char*  strstr(const char *, const char *);\n__libcall char*  strtok(char *, const char *);\n__libcall char*  strtok_r(char *, const char *, char **);\n__libcall size_t strxfrm(char *, const char *, size_t);\n*/\n\n#endif"],["syscall.h","#ifndef _SYSCALL_H\n#define _SYSCALL_H\n\n__libcall int write(unsigned int fd, void * buffer, unsigned int size);\n__libcall int read(unsigned int fd, void * buffer, unsigned int size);\n__libcall void memcpy(void * dst, void * src, unsigned int size);\n__libcall void * malloc(unsigned int size);\n__libcall void free(void * ptr);\n__libcall void * malloc_array(unsigned int element_size, unsigned int length);\n__libcall void __print_stack();\n#endif"],["time.h","#ifndef _TIME_H\n#define _TIME_H\n\n__libcall int time(void * time_ptr);\n\n#endif"]]);
export const Impls = new Map<string, string>([["assert.cpp","#include <stdio.h>\n\nvoid __assert (const char *msg, const char *file, int line){\n    //printf(\"assert failed in %s#%d: %s\", file, line, msg);\n    //exit(255);\n}"]]);
