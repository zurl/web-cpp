TranslationUnit
    = list:DeclarationList{
        return new AST.TranslationUnit(getLocation(), list);
    }

DeclarationList
    = _ head:Declaration tail:(_ Declaration)* _ {
        return buildList(head, tail, 1);
    }

Declaration
    = BlockDeclaration
    / FunctionDefinition
    / NamespaceDefinition
    / TemplateDeclaration
    / ExplicitInstantiation
    / DeclarationMissingSemicolon

BlockDeclaration
    = SimpleDeclaration
    / UsingStatements

BlockDeclarationList
    = head:BlockDeclaration tail:(_ BlockDeclaration)*{
        return buildList(head, tail, 1);
    }

NamespaceDefinition
    = 'namespace' _ name:Identifier _ '{' _ list:DeclarationList? _'}'{
        currScope.names.set(name.getLastID().name, TYPE_NAME);
        return new AST.NameSpaceBlock(getLocation(), name, list || []);
    }

SimpleDeclaration
    = specifiers:DeclarationSpecifiers _ initDeclarators:InitDeclaratorList? _ ';' {
        const declaration = new AST.Declaration(getLocation(), specifiers, initDeclarators || []);
        declaration.getTypedefName().map(name => currScope.names.set(name, TYPE_NAME));
        return declaration;
    }

DeclarationSpecifiers
    = head:DeclarationSpecifier tail:(_ DeclarationSpecifier)* {
        return new AST.SpecifierList(getLocation(), buildList(head, tail, 1));
    }

DeclarationSpecifier
    = StorageClassSpecifier
    / FunctionSpecifier
    / TypeSpecifier

TypeSpecifierList
    = head:TypeSpecifier tail:( _ TypeSpecifier)* {
        return buildList(head, tail, 3);
    }

TypeSpecifier
    = ClassSpecifier
    / EnumSpecifier
    / SimpleTypeSpecifier
    / TypenameSpecifier
    / TypeQualifier

PrimitiveTypeSpecifiers
    = head:PrimitiveTypeSpecifier tail:( _ PrimitiveTypeSpecifier)* {
        return new AST.PrimitiveTypeSpecifiers(getLocation(), buildList(head, tail, 3));
    }

SimpleTypeSpecifier
    = PrimitiveTypeSpecifier
    / TypeIdentifier

TypenameSpecifier
    = 'typename' id:TypeIdentifier{
        return id;
    }

TypeQualifier
    = ('const' / 'volatile') !IdentifierPart {
        return text();
    }

TypeQualifierList
    = head:TypeQualifier tail:(_ TypeQualifier)* {
        return buildList(head, tail, 1);
    }

Declarator
    = pointer:(Pointer _)? declarator:DirectDeclarator {
        return pointer ? new AST.PointerDeclarator(getLocation(), declarator, extractOptional(pointer, 0)) : declarator;
    }

DirectDeclarator
    = head:(identifier:Identifier {
        return new AST.IdentifierDeclarator(getLocation(), identifier);
    } / '(' _ declarator:Declarator _ ')' {
        return declarator;
    } ) tail:(_ (
        '[' _ length:AssignmentExpression? _ &!']' {
            return {
                location: getLocation(),
                type: AST.ArrayDeclarator,
                arguments: [false, [], length, false]
            };
        }
        / '(' _ parameters: ParameterList? _ ')' {
            return {
                location: getLocation(),
                type: AST.FunctionDeclarator,
                arguments: [parameters || new AST.ParameterList(getLocation())]
            }
        }
    ))* {
        return extractList(tail, 1).reduce((result, element) => new element.type(element.location, result, ...element.arguments), head);
    }

Pointer
    = '*' _ qualifiers:TypeQualifierList? _ pointer:Pointer? {
        return new AST.Pointer(getLocation(), qualifiers || [], pointer, '*');
    }
    /
    '&' _ qualifiers:TypeQualifierList? _ pointer:Pointer? {
        return new AST.Pointer(getLocation(), qualifiers || [], pointer, '&');
    }
    /
    '&&' _ qualifiers:TypeQualifierList? _ pointer:Pointer? {
        return new AST.Pointer(getLocation(), qualifiers || [], pointer, '&&');
    }

DeclarationWithoutSemicolon
    = specifiers:DeclarationSpecifiers _ initDeclarators:InitDeclaratorList?

DeclarationMissingSemicolon
    = decl:DeclarationWithoutSemicolon {
        error('Missing \\';\\' at end of declaration');
    }

FunctionSpecifier = ('inline' / '__libcall')

InitDeclaratorList
    = head:InitDeclarator tail:(_ ',' _ InitDeclarator)* {
        return buildList(head, tail, 3);
    }

InitDeclarator
    = declarator:Declarator initializer:CppInitializer? {
        return new AST.InitDeclarator(getLocation(), declarator, initializer || null);
    }
    
CppInitializer
    = _'=' _ init:Initializer{
        return init;
    }
    / _ '(' _ arguments_:ArgumentExpressionList? _ ')' {
        return new AST.ObjectInitializer(getLocation(),  arguments_ || []);  
    }


ParameterList
    = head:ParameterDeclaration tail:(_ ',' _ ParameterDeclaration)* ellipsis:(_ ',' _ '...')? {
        return new AST.ParameterList(getLocation(), buildList(head, tail, 3), !!ellipsis);
    }

ParameterDeclaration
    = specifiers:DeclarationSpecifiers _ declarator:(Declarator / AbstractDeclarator)? init:( _ '=' _ AssignmentExpression)?{
        return new AST.ParameterDeclaration(getLocation(), specifiers, declarator, init ? init[3] : null);
    }

IdentifierList
    = head:Identifier tail:(_ ',' _ Identifier)* {
        return buildList(head, tail, 3);
    }


Initializer
    = AssignmentExpression
    / '{' _ initializerList:InitializerList _ ','? _ &!'}' {
        return initializerList;
    }

InitializerList
    = head:InitializerListItem tail:(_ ',' _ InitializerListItem)* {
        return new AST.InitializerList(getLocation(), buildList(head, tail, 3));
    }

InitializerListItem
    = designators:(Designation _)? initializer:Initializer {
        return new AST.InitializerListItem(getLocation(), initializer);
    }

Designation
    = designators:DesignatorList _ '=' {
        return designators;
    }

DesignatorList
    = head:Designator tail:(_ Designator)* {
        return buildList(head, tail, 1);
    }

Designator
    = '[' _ subscript:ConstantExpression _ &!']' {
        return new AST.SubscriptDesignator(getLocation(), subscript);
    }
    / '.' _ member:Identifier {
        return new AST.MemberDesignator(getLocation(), member);
    }

FunctionDefinition
    = specifiers:DeclarationSpecifiers _ declarator:Declarator _ body:CompoundStatement {
        return new AST.FunctionDefinition(getLocation(), specifiers, declarator, body);
    }

NewTypeName
    =  specifierQualifiers:DeclarationSpecifiers _ declarator:NewDeclarator? {
        return new AST.TypeName(getLocation(), specifierQualifiers, declarator)
    }

TypeName
    = specifierQualifiers:DeclarationSpecifiers _ declarator:AbstractDeclarator? {
        return new AST.TypeName(getLocation(), specifierQualifiers, declarator)
    }

NewDeclarator
    = pointer:Pointer declarator:(_ DirectNewDeclarator)? {
        return new AST.PointerDeclarator(getLocation(), null, pointer, extractOptional(declarator, 1));
    }
    / declarator:DirectNewDeclarator {
        return declarator;
    }

AbstractDeclarator
    = pointer:Pointer declarator:(_ DirectAbstractDeclarator)? {
        return new AST.PointerDeclarator(getLocation(), null, pointer, extractOptional(declarator, 1));
    }
    / declarator:DirectAbstractDeclarator {
        return declarator;
    }

DirectNewDeclarator
    = head:(element:DirectNewDeclaratorElement {
            return new element.type(getLocation(), null, ...element.arguments)
        }
    ) tail:(_ DirectNewDeclaratorElement)* {
        return extractList(tail, 1).reduce((result, element) => new element.type(element.location, result, ...element.arguments), head);
    }

DirectAbstractDeclarator
    = head:(
        '(' _ declarator:AbstractDeclarator _ ')' {
            return declarator;
        }
        / element:DirectAbstractDeclaratorElement {
            return new element.type(getLocation(), null, ...element.arguments)
        }
    ) tail:(_ DirectAbstractDeclaratorElement)* {
        return extractList(tail, 1).reduce((result, element) => new element.type(element.location, result, ...element.arguments), head);
    }

DirectNewDeclaratorElement
    = '[' _ length:AssignmentExpression? _ &!']' {
        return {
            location: getLocation(),
            type: AST.ArrayDeclarator,
            arguments: [false, [], length, false]
        };
    }

DirectAbstractDeclaratorElement
    = '(' _ parameters:ParameterList? _ ')' {
        return {
            location: getLocation(),
            type: AST.FunctionDeclarator,
            arguments: [parameters || new AST.ParameterList(getLocation())]
        }
    }
    / DirectNewDeclaratorElement